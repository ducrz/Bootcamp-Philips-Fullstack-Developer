Instrutor: Venilton FalvoJr. Github: https://github.com/falvojr



Criando um Banco Digital com Java e Orientação a Objetos


Informações

DESCRIÇÃO

Reforce seu conhecimento em Programação Orientada a Objetos (POO) em Java com um desafio de projeto totalmente prático. Para isso, os pilares da orientação a objetos são devidamente explorados no contexto bancário, onde o expert implementa um projeto de referência (disponibilizado no GitHub) de forma prática e interativa. Sendo assim, você poderá desenvolver sua capacidade de abstração reproduzindo essa solução. Além disso, caso queira ir além, implemente suas próprias evoluções e melhorias ;-)


Como usar os desafios de projeto para criar seu portfólio


Apresentação e conceitos sobre Domínio / Problema


Considerado nosso conhecimento no domínio bancário, iremos abstrair uma solução Orientada a Objetos em Java.
Para isso, vamos interpretar o seguinte cenário:

"Um banco oferece aos seus clientes dois tipos de contas (corrente e poupança),
as quais possuem as funcionalidades de depósito, saque e transferência (entre contas
da própria instituição)."


Pilares da orientação a objetos - Abstração

Habilidade de concentrar-se nos aspectos essenciais de um domínio, ignorando características menos importantes ou acidentais.

Nesse contexto, objetos são abstrações de entidades existentes no domínio em questão.



Pilares da orientação a objetos - Encapsulamento

Encapsular significa esconder a implementação dos objetos, criando assim interfaces de uso mais concisas e fáceis de usar/entender. O encapsulamento favorece principalmente dois aspectos de um sistema: a manutenção e a evolução.



Pilares da orientação a Objetos - Herança

Permite que você defina uma classe filha que reutiliza (herda), estende ou modifica o comportamento de uma classe pai. A classe cujos membros são herdados é chamada de classe base. A classe que herda os membros da classe base é chamada de classe derivada.

Pilares da orientação a objetos - Polimorfismo

Capacidade de um objeto poder ser referenciado de várias formas, ou seja, é capacidade de tratar objetos criados a partir das classes específicas como objetos de uma classe genérica. Cuidado, polimorfismo não quer dizer que o objeto fica se transformando, muito pelo contrário, um objeto nasce de um tipo e morre daquele tipo, o que pode mudar é a maneira como nos referimos a ele.


Desenvolvendo saque, depósito, transferência e extrato


Proposta de desafio de projeto

* Estender o domínio, incluindo novas classes, atributos e/ou métodos;
Ex: listar todos os clientes;
* Incluir o Lombok ao projeto para reduzir a verbosidade do código.


Subindo o código no GitHub e comentários finais


Entendendo o Desafio

Reforce seu conhecimento em Programação Orientada a Objetos (POO) em Java com um desafio de projeto totalmente prático. Para isso, os pilares da orientação a objetos são devidamente explorados no contexto bancário, onde o expert implementa um projeto de referência (disponibilizado no GitHub) de forma prática e interativa. Sendo assim, você poderá desenvolver sua capacidade de abstração reproduzindo essa solução. Além disso, caso queira ir além, implemente suas próprias evoluções e melhorias ;)


Ajustes feitos:

* Adoção do padrão MVC.
* Adoção do Pacote Javax swing.
* Inclusão de menu para navegação entre as funções.
* Geração do Javadocs.



